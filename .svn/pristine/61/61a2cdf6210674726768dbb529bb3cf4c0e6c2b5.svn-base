#define WIN32_LEAN_AND_MEAN
#ifdef _WIN32
	#define _WINSOCK_DEPRECATED_NO_WARNINGS
	#define _CRT_SECURE_NO_WARNINGS
#endif

#ifdef _WIN32
#include <Windows.h>
#include <WinSock2.h>
#else
#include <unistd.h>
#include <arpa/inet.h>
#include <string.h>
#define SOCKET int
#define INVALID_SOCKET  (SOCKET)(~0)
#define SOCKET_ERROR            (-1)
#endif

#include <thread>
#include <iostream>
#pragma comment(lib,"ws2_32.lib")
using namespace std;


#define MySuceed 0
#define MyFailed 1

enum CMD
{
	CMD_LOGIN,
	CMD_LOGINOUT,
	CMD_LOGIN_RESULT,
	CMD_LOGINOUT_RESULT,
	CMD_NEW_USER_JOIN,
	CMD_ERROR
};
struct DataHeader
{
	short dataLenth;
	short cmd;
};
struct Login :public DataHeader
{
	Login()
	{
		dataLenth = sizeof(Login);
		cmd = CMD_LOGIN;
	}
	char UserName[32];
	char PassWord[32];
};
struct LoginOut :public DataHeader
{
	LoginOut()
	{
		dataLenth = sizeof(LoginOut);
		cmd = CMD_LOGINOUT;
	}
	char UserName[32];
};
struct LoginResult :public DataHeader
{
	LoginResult()
	{
		dataLenth = sizeof(LoginResult);
		cmd = CMD_LOGIN_RESULT;
		result = MySuceed;
	}
	int result;
};
struct LoginOutResult :public DataHeader
{
	LoginOutResult()
	{
		dataLenth = sizeof(LoginOutResult);
		cmd = CMD_LOGINOUT_RESULT;
		result = MySuceed;
	}

	int result;
};
struct NewUserJoin :public DataHeader
{
	NewUserJoin()
	{
		dataLenth = sizeof(NewUserJoin);
		cmd = CMD_NEW_USER_JOIN;
		sock = 0;
	}
	SOCKET sock;
};

int processor(SOCKET _cSock)
{
	//创建缓冲区
	char szRecv[1024] = {};

	///5.接收服务端数据
	int nLen = recv(_cSock, szRecv, sizeof(DataHeader), 0);
	DataHeader* header = (DataHeader*)szRecv;


	if (nLen <= 0)
	{
		printf("与服务端<socket=%d>断开连接，任务结束\n", _cSock);
		return -1;
	}
	///6.处理请求
	switch (header->cmd)
	{
	case CMD_LOGIN_RESULT:
	{
		//因为第一次接收头时已经占用了前面的字节不够用了  这里需要偏移才能完整接收 长度也得减
		recv(_cSock, szRecv + sizeof(DataHeader), header->dataLenth - sizeof(DataHeader), 0);
		LoginResult* loginret = (LoginResult*)szRecv;

		cout << "-----------------------------" << endl;
		printf("收到服务端<socket=%d>命令: CMD_LOGIN_RESULT \n数据长度: %d\n返回值: %d\n",
			_cSock, loginret->dataLenth, loginret->result);
		cout << "-----------------------------" << endl;

		if (MySuceed == loginret->result)
		{
			cout << "登陆成功" << endl;
		}
		else if (MyFailed == loginret->result)
		{
			cout << "登陆失败" << endl;
		}


		break;
	}
	case CMD_LOGINOUT_RESULT:
	{
		//因为第一次接收头时已经占用了前面的字节不够用了  这里需要偏移才能完整接收 长度也得减
		recv(_cSock, szRecv + sizeof(DataHeader), header->dataLenth - sizeof(DataHeader), 0);
		LoginOutResult* loginoutret = (LoginOutResult*)szRecv;

		cout << "-----------------------------" << endl;
		printf("收到服务端<socket=%d>命令: CMD_LOGINOUTR_RESULT \n数据长度: %d\n返回值: %d\n",
			_cSock, loginoutret->dataLenth, loginoutret->result);
		cout << "-----------------------------" << endl;

		if (MySuceed == loginoutret->result)
		{
			cout << "退出成功" << endl;
		}
		else if (MyFailed == loginoutret->result)
		{
			cout << "退出失败" << endl;
		}
		break;
	}
	case CMD_NEW_USER_JOIN:
	{
		recv(_cSock, szRecv + sizeof(DataHeader), header->dataLenth - sizeof(DataHeader), 0);
		NewUserJoin* userjoin = (NewUserJoin*)szRecv;
		printf("收到服务端<socket=%d>命令: CMD_NEW_USER_JOIN \n数据长度: %d\n加入的新客户端: %d\n",
			_cSock, userjoin->dataLenth, userjoin->sock);
	}
	break;
	}
	return 0;
}
//用于关闭主线程while循环的变量
bool g_bRun = true;
//线程Thread
void cmdThread(SOCKET _sock)
{
	while (true)
	{
		char cmdBuf[256] = {};
		scanf("%s", cmdBuf);

		if (0 == strcmp(cmdBuf, "exit"))
		{
			cout << "cmdThread线程退出" << endl;
			g_bRun = false;
			break;
		}
		//4.向服务器发送请求命令
		else if (0 == strcmp(cmdBuf, "login"))
		{
			Login login;
			strcpy(login.UserName, "tyzhou");
			//printf("用户名:tyzhou\n请输入密码: ");
			//scanf("%s", login.PassWord);
			strcpy(login.PassWord, "hdw123");
			send(_sock, (const char*)&login, sizeof(Login), 0);
		}
		else if (0 == strcmp(cmdBuf, "loginout"))
		{
			LoginOut loginout;
			strcpy(loginout.UserName, "tyzhou");
			send(_sock, (const char*)&loginout, sizeof(LoginOut), 0);
		}

		else
		{
			cout << "不支持的命令" << endl;
		}
	}


}

int main()
{
#ifdef _WIN32
	WORD ver = MAKEWORD(2, 2);
	WSADATA dat;
	WSAStartup(ver, &dat);
#endif
	///
	//用Socket API建立一个TCP客户端
	//1.建立一个socket
	SOCKET _sock = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);
	if (INVALID_SOCKET == _sock)
	{
		cout << "ERROR 建立了无效的_socket" << endl;
	}
	else
		cout << "建立Socket 成功" << endl;

	//2.连接服务器
	sockaddr_in _sin = {}; //后面+个_in类型 方便手写此类型中的变量
	_sin.sin_family = AF_INET;
	_sin.sin_port = htons(4567); //host to net unsigned short
#ifdef _WIN32
	_sin.sin_addr.S_un.S_addr = inet_addr("127.0.0.1");
#else
	_sin.sin_addr.s_addr = inet_addr("192.168.79.1");
#endif
	int ret = connect(_sock, (sockaddr*)&_sin, sizeof(sockaddr));
	cout << "ret = " << ret;
	if (SOCKET_ERROR == ret)
	{
		cout << "连接服务器失败..." << endl;
	}
	else
		cout << "连接服务器成功..." << endl;

	//启动线程函数
	thread t1(cmdThread, _sock);

	t1.detach();

	while (g_bRun)
	{
		fd_set fdRead;
		FD_ZERO(&fdRead);
		FD_SET(_sock, &fdRead);
		timeval t = { 1,0 };
		int ret = select(_sock, &fdRead, 0, 0, &t);
		if (ret < 0)
		{
			cout << "select任务结束" << endl;
		}
		if (FD_ISSET(_sock, &fdRead))
		{
			FD_CLR(_sock, &fdRead);
			//5.处理请求命令
			if (-1 == processor(_sock))
			{
				cout << "select任务结束2" << endl;
			}

		}


		//cout << "空闲时间做其他事" << endl;

	}

#ifdef _WIN32
	//7.关闭套接字 closesocket
	closesocket(_sock);
	//清除Windows socket环境 
	WSACleanup();
#else
	close(_sock, 2);
#endif
	///

	getchar();
	return 0;


}