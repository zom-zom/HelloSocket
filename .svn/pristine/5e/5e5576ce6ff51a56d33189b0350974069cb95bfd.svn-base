#ifndef _EasyTcpServer_hpp_
#define _EasyTcpServer_hpp_
#ifdef _WIN32
#define WIN32_LEAN_AND_MEAN
#define _WINSOCK_DEPRECATED_NO_WARNINGS
#define _CRT_SECURE_NO_WARNINGS
#include <Windows.h>
#include <WinSock2.h>
#pragma comment(lib,"ws2_32.lib")
#else
#include <unistd.h> //uni std
#include <arpa/inet.h>
#include <string.h>
#define SOCKET int
#define INVALID_SOCKET  (SOCKET)(~0)
#define SOCKET_ERROR            (-1)
#endif
#include <iostream>
#include <thread>
#include <vector>
#include "MessageHeader.hpp"

class EasyTcpServer
{
private:
	SOCKET _sock;
	std::vector<SOCKET> g_clients;
public:

	EasyTcpServer()
	{
		_sock = INVALID_SOCKET;
	}
	virtual ~EasyTcpServer()
	{
		Close();
	}
	void setsockError()
	{
		_sock = INVALID_SOCKET;
	}
	//初始化Socket
	SOCKET InitSocket()
	{
		//启动Win Sock 2.x环境
#ifdef _WIN32
		WORD ver = MAKEWORD(2, 2);
		WSADATA dat;
		WSAStartup(ver, &dat);
#endif
		//用Socket API建立一个TCP客户端
		//建立一个socket
		if (INVALID_SOCKET != _sock)
		{
			printf("<socket=%d>关闭旧连接\n", _sock);
			Close();
		}
		_sock = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);
		if (INVALID_SOCKET == _sock)
		{
			cout << "ERROR 建立了无效的_socket" << endl;
		}
		else
			cout << "建立socket 成功" << endl;
		return _sock;
	}
	//绑定IP和端口号
	int BindPort(const char* ip,unsigned short port)
	{
		if (INVALID_SOCKET == _sock)
		{
			InitSocket();
		}
		///2.绑定用于接收客户端连接的网络端口
		sockaddr_in _sin = {}; //后面+个_in类型 方便手写此类型中的变量
		_sin.sin_family = AF_INET;
		_sin.sin_port = htons(port); //host to net unsigned short
#ifdef _WIN32
		if (ip)
			_sin.sin_addr.S_un.S_addr = inet_addr(ip);//any则是用电脑上任意一个ip都作为服务端ip地址\
																							inet_addr("127.0.0.1")此种写法绑定一个地址
		else
			_sin.sin_addr.S_un.S_addr = INADDR_ANY;
#else
		if(ip)
			_sin.sin_addr.s_addr = inet_addr(ip);
		else
			_sin.sin_addr.s_addr = INADDR_ANY;
#endif 				
		int ret = bind(_sock, (sockaddr*)&_sin, sizeof(_sin));
		if (SOCKET_ERROR == ret)
			cout << "ERROR 绑定用于接受客户端连接的网络端口失败" << endl;
		else
			cout << "SUCCEED 绑定网络端口成功" << endl;
		return ret;
	}
	//监听端口号
	int ListenPort(int nPort)
	{
		///listen 监听网络端口
		//nPort为同时接听几个端口变量
		int ret = listen(_sock, nPort);
		if (SOCKET_ERROR == ret)//listen()第二参数为等待几个人同时连接
			printf("<socket=%d>ERROR 监听网络端口失败\n", _sock);
		else
			printf("<socket=%d>SUCCEED 监听网络端口成功\n", _sock);
		return ret;
	}
	//接受客户端连接
	SOCKET Accept()
	{
		///accept 等待接受客户端连接
		sockaddr_in clientAddr = {};//用于接收客户端地址的
		int nAddrLen = sizeof(sockaddr_in);
		SOCKET _cSock = INVALID_SOCKET;//将接受的客户端先初始化为无效的
#ifdef _WIN32
		_cSock = accept(_sock, (sockaddr*)&clientAddr, &nAddrLen);
#else
		_cSock = accept(_sock, (sockaddr*)&clientAddr, (socklen_t*)&nAddrLen);
#endif	
		if (INVALID_SOCKET == _cSock)
		{
			printf("<socket=%d>ERROR, 接受到无效客户端SOCKET", (int)_sock);
		}
		else
		{
			NewUserJoin userjoin;
			SendDataToAll(&userjoin);
			g_clients.push_back(_cSock);
			printf("<socket=%d>新客户端加入:socket= %d IP = %s\n", (int)_sock, (int)_cSock, inet_ntoa(clientAddr.sin_addr));//inet_ntoa()将ip地址转换为可读字符串
		}
		return _cSock;
	}
	//关闭Socket
	void Close()
	{
		if (_sock != INVALID_SOCKET)
		{
#ifdef _WIN32
			//关闭接收的socket 套接字
			for (int n = (int)g_clients.size() - 1; n >= 0; n--)
			{
				closesocket(g_clients[n]);
			}

			///关闭套接字 closesocket
			closesocket(_sock);
			WSACleanup();
#else
			//关闭接收的socket 套接字
			for (int n = (int)g_clients.size() - 1; n >= 0; n--)
			{
				close(g_clients[n]);
			}

			///8.关闭套接字 closesocket
			close(_sock);

#endif
		}

	}
	//处理网络消息
	bool OnRun()
	{
		if (isRun())
		{
			//伯克利套接字 BSD Socket
			fd_set fdRead;//描述符(socket) 集合
			fd_set fdWrite;
			fd_set fdExp;
			//清理集合
			FD_ZERO(&fdRead);
			FD_ZERO(&fdWrite);
			FD_ZERO(&fdExp);
			//将描述符（socket）加入集合中
			FD_SET(_sock, &fdRead);
			FD_SET(_sock, &fdWrite);
			FD_SET(_sock, &fdExp);

			//最大sock值
			SOCKET maxSock = _sock;
			//将接收到的描述符（socket）加入 集合中
			for (int n = (int)g_clients.size() - 1; n >= 0; n--)
			{
				FD_SET(g_clients[n], &fdRead);
				if (maxSock < g_clients[n])
				{
					maxSock = g_clients[n];
				}
			}
			//nfds 是一个整数值，是指fd_set集合中的描述符(socket)的范围，而不是数量
			//既是所有文件描述符最大值+1 在Windows中这个参数可以写0
			timeval t = { 0,0 };//无需等待有数据能查询到   如果最后一个参数NULL则是堵塞式
			int ret = select(maxSock + 1, &fdRead, &fdWrite, &fdExp, &t);
			//cout << "空闲时间做其他事" << endl;
			if (ret < 0)
			{
				cout << "select任务结束" << endl;
				Close();
				return false;
			}
			//判断描述符（socket）是否在集合中
			if (FD_ISSET(_sock, &fdRead))
			{
				FD_CLR(_sock, &fdRead);
				Accept();
			}
			//this method can using difference platform  include WIN32
			//循环处理集合中 可读的描述符（socket）
			for (int n = (int)g_clients.size() - 1; n >= 0; n--)
			{
				if (FD_ISSET(g_clients[n], &fdRead))
				{

					if (-1 == RecvData(g_clients[n]))
					{
						//std::vector<SOCKET>::iterator iter = g_clients.begin();
						auto iter = g_clients.begin();
						if (iter != g_clients.end())
						{
							g_clients.erase(iter);
						}
					}
				}
			}
			return true;
		}
		return false;
		
	}
	//是否工作中
	bool isRun()
	{
		return INVALID_SOCKET != _sock;
	}
	//接收数据 处理黏包 拆分包
	int RecvData(SOCKET _cSock)
	{
		//创建缓冲区
		char szRecv[1024] = {};

		///接收客户端数据
		int nLen = recv(_cSock, szRecv, sizeof(DataHeader), 0);
		DataHeader* header = (DataHeader*)szRecv;

		if (nLen <= 0)
		{
			printf("客户端<socket=%d>已退出，任务结束\n", _cSock);
			return -1;
		}
		//因为第一次接收头时已经占用了前面的字节不够用了  这里需要偏移才能完整接收 长度也得减
		recv(_cSock, szRecv + sizeof(DataHeader), header->dataLenth - sizeof(DataHeader), 0);
		OnNetMsg(_cSock, header);
		return 0;

	}
	//响应网络消息
	virtual void OnNetMsg(SOCKET _cSock, DataHeader* header)
	{
		///处理请求
		switch (header->cmd)
		{
		case CMD_LOGIN:
		{
			Login* login = (Login*)header;

			cout << "-----------------------------" << endl;
			printf("收到客户端<socket=%d>命令: CMD_LOGIN \n数据长度: %d\n用户名: %s\n密码:%s\n",
				_cSock, login->dataLenth, login->UserName, login->PassWord);
			cout << "-----------------------------" << endl;
			//判断用户密码是否正确的过程
			if (0 == strcmp(login->PassWord, "hdw123"))
			{
				LoginResult _result;
				send(_cSock, (const char*)&_result, sizeof(LoginResult), 0);
			}
			else
			{
				LoginResult ret;
				ret.result = MyFailed;
				send(_cSock, (const char*)&ret, sizeof(LoginResult), 0);
			}
			break;
		}
		case CMD_LOGINOUT:
		{

			LoginOut* loginout = (LoginOut*)header;

			cout << "-----------------------------" << endl;
			printf("收到客户端<socket=%d>命令: CMD_LOGINOUT \n数据长度: %d\n用户名: %s\n",
				_cSock, loginout->dataLenth, loginout->UserName);
			cout << "-----------------------------" << endl;
			//判断用户是否正确的过程 
			if (0 == strcmp("tyzhou", loginout->UserName))
			{
				LoginOutResult ret;
				send(_cSock, (char*)&ret, sizeof(LoginOutResult), 0);
			}
			else
			{
				LoginOutResult ret;
				ret.result = MyFailed;
				send(_cSock, (char*)&ret, sizeof(LoginOutResult), 0);
			}
			break;
		}
		default:
		{
			DataHeader header = { 0,CMD_ERROR };
			send(_cSock, (const char*)&header, sizeof(DataHeader), 0);

		}
		break;
		}
	}
	//发送指定Socket数据
	int SendData(SOCKET _sock, DataHeader* header)
	{
		if (isRun() && header)
		{
			return send(_sock, (const char*)header, header->dataLenth, 0);

		}
		return SOCKET_ERROR;
	}
	void SendDataToAll(DataHeader* header)
	{
		if (isRun() && header)
		{
			for (int n = (int)g_clients.size() - 1; n >= 0; n--)
			{
				SendData(g_clients[n], header);
			}
		}
	}

};



#endif