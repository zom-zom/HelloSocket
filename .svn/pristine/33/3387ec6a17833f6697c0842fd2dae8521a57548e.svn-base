#define WIN32_LEAN_AND_MEAN
#define _WINSOCK_DEPRECATED_NO_WARNINGS
#define _CRT_SECURE_NO_WARNINGS

#include <Windows.h>
#include <WinSock2.h>

#include <iostream>
#pragma comment(lib,"ws2_32.lib")
using namespace std;


#define MySuceed 0
#define MyFailed 1

enum CMD
{
	CMD_LOGIN,
	CMD_LOGINOUT,
	CMD_LOGINRESULT,
	CMD_LOGINOUTRESULT,
	CMD_ERROR
};
struct DataHeader
{
	short dataLenth;
	short cmd;
};
struct Login :public DataHeader
{
	Login()
	{
		dataLenth = sizeof(Login);
		cmd = CMD_LOGIN;
	}
	char UserName[32];
	char PassWord[32];
};
struct LoginOut :public DataHeader
{
	LoginOut()
	{
		dataLenth = sizeof(LoginOut);
		cmd = CMD_LOGINOUT;
	}
	char UserName[32];
};
struct LoginResult :public DataHeader
{
	LoginResult()
	{
		dataLenth = sizeof(LoginResult);
		cmd = CMD_LOGINRESULT;
		result = MySuceed;
	}
	int result;
};
struct LoginOutResult :public DataHeader
{
	LoginOutResult()
	{
		dataLenth = sizeof(LoginOutResult);
		cmd = CMD_LOGINOUTRESULT;
		result = MySuceed;
	}

	int result;
};

int main()
{
	WORD ver = MAKEWORD(2, 2);
	WSADATA dat;
	WSAStartup(ver, &dat);
	///
	//用Socket API建立一个TCP客户端
	//1.建立一个socket
	SOCKET _sock = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);
	if (INVALID_SOCKET == _sock)
	{
		cout << "ERROR 建立了无效的_socket" << endl;
	}
	else
		cout << "建立Socket 成功" << endl;

	//2.连接服务器
	sockaddr_in _sin = {}; //后面+个_in类型 方便手写此类型中的变量
	_sin.sin_family = AF_INET;
	_sin.sin_port = htons(4567); //host to net unsigned short
	_sin.sin_addr.S_un.S_addr = inet_addr("127.0.0.1");
	int ret = connect(_sock, (sockaddr*)&_sin, sizeof(sockaddr));
	if (SOCKET_ERROR == ret)
	{
		cout << "连接服务器失败" << endl;
	}
	else
		cout << "连接服务器成功..." << endl;
	while (true)
	{
		//3.输入请求命令
		char _cmdBuf[128] = "";
		scanf_s("%s", &_cmdBuf, 128);

		//4.处理请求命令
		if (0 == strcmp(_cmdBuf, "exit"))
		{
			cout << "收到exit命令，任务结束" << endl;
			break;
		}
		else if (0 == strcmp(_cmdBuf, "login"))
		{
			//5.向服务器发送请求命令
			Login login;
			strcpy_s(login.UserName, "tyzhou");
			scanf_s("%s", login.PassWord, 32);
			//strcpy_s(login.PassWord, "hdw123");


			send(_sock, (const char*)&login, sizeof(Login), 0);
			//6.接收服务器信息 recv
			LoginResult ret;
			recv(_sock, (char*)&ret, sizeof(LoginResult), 0);
			printf("收到命令%0d: CMD_LOGINRESULT \n数据长度: %d\n返回值: %d\n", ret.cmd, ret.dataLenth, ret.result);
			if (MySuceed == ret.result)
			{
				cout << "登陆成功" << endl;
			}
			else if (MyFailed == ret.result)
			{
				cout << "登陆失败" << endl;
			}

		}
		else if (0 == strcmp(_cmdBuf, "loginout"))
		{
			LoginOut loginout;
			strcpy_s(loginout.UserName, "tyzhou");

			send(_sock, (const char*)&loginout, sizeof(LoginOut), 0);

			LoginResult ret;
			recv(_sock, (char*)&ret, sizeof(LoginResult), 0);
			printf("收到命令%0d: CMD_LOGINOUTRESULT \n数据长度: %d\n返回值: %d\n", ret.cmd, ret.dataLenth, ret.result);
			if (MySuceed == ret.result)
			{
				cout << "账户退出成功" << endl;
			}
			else if(MyFailed == ret.result)
			{
				cout << "账户退出失败" << endl;
			}
		}
		else
		{
			cout << "命令错误，请重新输入" << endl;
		}
		

	}


	//7.关闭套接字 closesocket
	closesocket(_sock);


	///
	//清除Windows socket环境 
	WSACleanup();
	getchar();
	return 0;


}